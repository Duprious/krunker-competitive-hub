// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Team          Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id             String        @id @default(cuid())
  name           String
  region         String
  type           String
  slug           String
  description    String
  hostName       String        @default("Krunker")
  maxTeams       Int           @default(8)
  startDate      DateTime      @default("2023-11-06T21:54:55Z")
  endDate        DateTime      @default("2024-11-06T21:54:55Z")
  createdAt      DateTime      @default(now())
  signupsClosed  Boolean       @default(false)
  ended          Boolean       @default(false)
  bracketLink    String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  teams          Team[]

  @@index([organizationId])
  @@map("Tournaments")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  region      String
  tournaments Tournament[]

  @@unique([name])
}

model Team {
  id           String     @id @default(cuid())
  teamName     String
  players      Player[]   @relation("players")
  Sub          Player?    @relation("Sub", fields: [playerId], references: [id])
  captain      String
  tournamentId String
  validated    Boolean    @default(false)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  playerId     String?
  owner        User       @relation(fields: [userId], references: [id])
  userId       String

  @@index([tournamentId])
  @@index([playerId])
  @@index([userId])
}

model Player {
  id          String  @id @default(cuid())
  discordName String
  ign         String
  SubFor      Team[]  @relation("Sub")
  team        Team[]  @relation("players")
  teamId      String?

  @@index([teamId])
}

enum Role {
  ADMIN
  USER
}
